name: Push Commit and Bundle Files into ZIP

on:
  repository_dispatch:
    types: [jira_status_update]  # Custom event when JIRA status is updated

jobs:
  push_and_bundle:
    runs-on: [self-hosted]

    steps:
      # Step 1: Set up Git configuration
      - name: Set up Git configuration
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 2: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true


           # Step 3: Find the latest commit linked to JIRA issue
      - name: Find latest commit linked to JIRA issue
        id: find_commit
        run: |
          bash -c '
          ISSUE_KEY=${{ github.event.client_payload.issue_key }}
          
          # Find the latest commit with the JIRA issue key in the commit message
          LATEST_COMMIT=$(git log --all --grep="$ISSUE_KEY" --format="%H" -n 1)
          COMMIT_MESSAGE=$(git log --format="%s" -n 1 $LATEST_COMMIT)

          echo "LATEST_COMMIT: $LATEST_COMMIT"
          echo "Commit Message: $COMMIT_MESSAGE"

          if [[ "$COMMIT_MESSAGE" != *"$ISSUE_KEY"* ]]; then
            echo "Commit message does not contain the JIRA issue key: $ISSUE_KEY"
            exit 0  # Exit the workflow if the commit message does not match the JIRA issue key
          fi

          echo "commit_hash=$LATEST_COMMIT" >> $GITHUB_ENV  # Store the commit hash as an environment variable
          '

      - name: Determine the branch containing the commit
        id: find_branch
        run: |
          BRANCH_NAME=$(git branch -r --contains ${{ env.commit_hash }} | grep -v HEAD | sed 's/origin\///' | head -n 1)
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Branch containing the commit: $BRANCH_NAME"

      - name: Checkout the branch where the commit was made
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ env.branch_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      # - name: Install dependencies
      #   run: |
      #     npm install @playwright/test
      #     npx playwright install

      # - name: Run playwright tests
      #   run: |
      #     npx playwright test tests


      # Step 4: Identify files changed in the latest commit
      - name: Identify files changed in the latest commit
        id: get_changed_files
        run: |

          echo "LATEST_COMMIT: ${{ env.commit_hash }}"
          # Get the list of files changed in the latest commit
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r "${{ env.commit_hash }}")

          CHANGED_FILES=$(echo "$CHANGED_FILES" | grep -vE '^\.github/workflows/')

          echo "Changed files (excluding workflows): $CHANGED_FILES"
          # Save the changed files to an environment variable
          echo "changed_files=$(echo "$CHANGED_FILES" | tr '\n' ' ')" >> $GITHUB_ENV

      # Step 5: Bundle only the changed files into a ZIP file
      - name: Bundle changed files into a ZIP file
        run: |
          zip_filename="entities_${{ github.event.client_payload.issue_key }}_$(date +'%Y%m%d%H%M%S').zip"
          echo "ZIP filename: $zip_filename"

          # Properly handle the space-separated file names
          for file in ${{ env.changed_files }}; do
            if [ -e "$file" ]; then
              zip -r $zip_filename "$file"
            else
              echo "Warning: File '$file' does not exist or is excluded"
            fi
          done

          # Verify the ZIP file contents
          if [ -f "$zip_filename" ]; then
            echo "ZIP file created successfully:"
            zipinfo $zip_filename
          else
            echo "No files were zipped"
          fi

          echo "zip_filename=$zip_filename" >> $GITHUB_ENV

      - name: Verify ZIP file exists
        run: |
          ls -l ${{env.zip_filename}}
          echo "ZIP file exists: $(test -e ${{env.zip_filename}} && echo 'yes' || echo 'no')"

      # Step 6: Commit and push the ZIP file to the target branch
      - name: Commit and push ZIP file to target branch
        run: |
          git checkout main
          git merge ${{ env.branch_name }} --no-ff -m "Merge ${GITHUB_REF##*/} into main"
          git add ${{env.zip_filename}}
          git commit -m "Add bundled ZIP file for JIRA issue update" || echo "No changes to commit"
          git push origin main
        # Push to the target branch (adjust if necessary)

      # Step 7: Upload the ZIP as an artifact (optional)
      # - name: Upload ZIP to Artifactory
      #   run: |
      #     curl -u ${{ secrets.ARTIFACTORY_API_KEY }} -T ${{ env.zip_filename }} "https://${{ secrets.ARTIFACTORY_URL }}/artifactory/${{ secrets.ARTIFACTORY_REPO }}/${{ env.zip_filename }}"
